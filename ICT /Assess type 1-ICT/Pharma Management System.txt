
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PharmaManagement.DAL
{
    public class Program
    {
        public string Id { get; set; }
        public string Name { get; set; }

        public string Address { get; set; }
    }
}

//-------Pharmaitemtypes----------------------------------------------

/*
 using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PharmaManagement.DAL
{
    public class PharamaItemtype
    {
        public string Id { get; set; }
        public string Name { get; set; }  
    }
}
*/

//----------------------Pharmaitems----------------------------------------

/*
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PharmaManagement.DAL
{
    public class PharamaItem
    {
        public string Id { get; set; }
        public string Name { get; set; } 
        public double Cost { get; set; } 
        public int QuantityInStocks { get; set; } 

    }
}
*/

//----------------------Pharmadal-----------------------------------------------

/*
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SqlClient;
using System.Data;

namespace PharmaManagement.DAL
{
   public class PharamaDAL
{
    public SqlConnection SqlCon { get; set; }
    public PharamaDAL() { }
    public bool InsertPharmaItem(string name,double cost,int quantityInStock,int typeId,string supplierId )
    {
        try
        {
            string querystring = "insert into PharmaceuticalItem values('" + name + "','" + cost + "','" + quantityInStock + "','" + typeId + "','" + supplierId + "')";
            SqlCon.Open();
            SqlCommand cmd = new SqlCommand(querystring,SqlCon )
            SqlDataReader reader = cmd.ExecuteReader();
            SqlCon.Close();
            return true;
        }
        catch(Exception e)
        {
        Console.WriteLine("Error : " +e.Message);
        return false;
        }
public List<PharmaItem> GetPharmaItemDetails()
{
    try
    {
        string querystring = "select * from PhamaceuticalItems oder by Name";
        SqlCon.Open();
        SqCommand cmd = new SqlCommand(querystring, SqlCon);
        SqlDataReader reader = cmd.ExecuteReader();
        List < PharmaItems > l1=new List < PharmaItems>(); 
        while (reader.Read())
        {
            PharmaItem p1= new PharmaItem();
            p1.Id = reder[0].ToString();
            p1.Name = reader[1].ToString();
            p1.Cost = (double)reader[2];
            p1.QuantiyInStock = (int)reader[3];
            l1.Add(p1);
        }
        SqlCon.Close()
        return l1;

    }
    catch (Exception e)
    {
        Console.WriteLine("Error 1:" +e.Message);
        return null;
    }
}

public List<PharmaItemType> GetPharmaTypes()
{
    try
    {
        string querrystring = "select * from PhamaceuticalItemType";
        SqlCon.Open();
        SqCommand cmd = new SqlCommand(querrystring, SqlCon);
        SqlDataReader reader = cmd.ExecuteReader();
        List<PharmaItemsType> l1 = new List<PharmaItemType>();
        while (reader.Read())
        {
            PharmaItemType p = new PharmaItemType();
            p.Id = reder[0].ToString();
            p.Name = reader[1].ToString();
            pList.Add(p);
        }
        SqlCon.Close();
        return pList;

    }
    catch (Exception e)
    {
        Console.WriteLine("Error 1:" + e.Message);
        return null;
    }
}
 public List<Supplier> GetSuppliers()
{
    try{
        string querrystring = "select * from from Suppliers";
        SqlCon.Open();
        SqlCommand cmd = new SqlCommand(querrystring, SqlCon);
        SqlDataReader reader = cmd.ExecuteReader();
        List<Supplier> sList = new List<Supplier>();
        while(reader.Read())
        {
            Supplier s = new Supplier();
            string.Id = reader[0].ToString().ToString();
            s.Name = reader.[1].ToString().ToString();
            s.Address = reader[2].ToString().ToString();
            sList.Add(s);    
        }
        SqlCon.Close();
    }
    catch (Exception e)
    {
        Console.WriteLine("Error 1:" + e.Message);
        return null;
    }
}

public List<PharmaItem> DetailsAfterDiscount(double cost,double discount)
{
    try
    {
        string querystring = "select * from Phamaceutical Items where Cost >" +cost;
        SqlCon.Open();
        SqCommand cmd = new SqlCommand(querystring, SqlCon);
        SqlDataReader reader = cmd.ExecuteReader();
        List<PharmaItems> l1 = new List<PharmaItems>();
        while (reader.Read())
        {
            PharmaItem p1 = new PharmaItem();
            p1.Id = reder[0].ToString();
            p1.Name = reader[1].ToString();
            p1.Cost = (double)reader[2];
            p1.QuantiyInStock = (int)reader[3];
            p1.Cost=(p1.Cost/100)*discount;
            l1.Add(p1);
        }
        SqlCon.Close()
        return l1;

    }
    catch (Exception e)
    {
        Console.WriteLine("Error 1:" + e.Message);
        return null;
    }

}

    }

}
}
*/

//--------------------------------------------program.cs-----------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PharmaManagement.DAL

namespace PharmaManagement.Client
{
    public class Program
    {
        static void Main(string[] args)
        {
            while (true)
            {
                try
                {
                    Console.WriteLine("\nMenu\n1. Add Pharmaceutical Items\n2. View Pharmaceutical Items\n3.View Items on Discount \n4.Exit ");
                    Console.WriteLine("\nEnter Your Choice :");
                    int choice = Convert.ToInt32(Console.ReadLine());
                    Console.WriteLine();
                    switch (choice)
                    {
                        case 1:
                            {
                                AddNewPharmaItems();
                                break;


                            }
                        case 2:
                            {
                                ViewPharmaItems();
                                break;

                            }
                        case 3:
                            {
                                Console.WriteLine("Enter Cost:");
                                double cost = double.Parse(Console.ReadLine());
                                Console.WriteLine("Enter Discount :");
                                double discount = double.Parse(Console.ReadLine());
                                ViewProductsAfterDiscount(cost, discount);
                                break;

                            }
                        case 4:
                            {
                                Console.WriteLine("Exiting from the Application");
                                Environment.Exit(0);
                                break;
                            }
                        default:
                            {
                                Console.WriteLine("Invalid choice.Please Enter a Valid Choice");
                                break;
                            }

                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);

                }
            }
        }

        public static void ViewPharmaItems()
        {
            try
            {
                PharmaDAL pharmaDalObject = new PharmaDAL();
                var pharmaData = pharmaDalObject.GetPharmaItemDetails();
                if (pharmaData == null || pharmaData.Count == 0 )
                {
                   Console.WriteLine("No Records Found"  );
                }
                else if (phramaData.Count> 0 )
                {
                   Console.WriteLine("{0,-10}{1,-20}{2,-10}{3,-30}" ,"Id","Name","Cost","Quantity In Stock");
                    foreach(var item in pharmaData )
                    {
                       Console.WriteLine("{0,-10}{1,-20}{2,-10}{3,-30}",item.Id,item.Name,item.Cost,item.QuantityInStock);
                    }
                }

            }
            catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                   
                }
        }

        public static void AddNewPharmaItem()
        {
            try
            {
                PharmaDAL pharmaDalObject = new PharmaDAL();
                try
                {
                    Console.Write("Pharma Item Name");
                    string name = Console.ReadLine().TrimStart();
                    double cost = 0.0;
                    do
                    {
                        Console.Write("Price : ");
                        cost = double.Parse(Console.ReadLine().TrimStart());
                        if (cost <= 0)
                        {
                            Console.WriteLine("Price should be Greater than Zero");
                        }
                    } while (cost <= 0);
                    int stockCount = 0;
                    do
                    {
                        Console.Write("Qantity In Stock: ");
                        stockCount = int.Parse(Console.ReadLine().TrimStart());
                        if (stockCount <= 0)
                        {
                            Console.WriteLine("Quantity In Stock should be Greater than Zero");
                        }

                    } while (stockCount <= 0);
                    var pharmaItemTypes = pharmaDalObject.GetPharmaTypes();

                    Console.WriteLine("\nPharma Items Types\n");
                    Console.WriteLine("{0,-5}{1,-10}", "Id", "Name");
                    foreach (var item in pharmaItemTypes)
                    {
                        Console.WriteLine("{0,-5}{1,-10}", item.Id, item.Name);
                    }
                    Console.Write("Choose a Type Id : ");
                    int typeId = int.Parse(Console.ReadLine());

                    Console.WriteLine("\nPharma Items Suppliers\n");
                    var supplierDetails = pharmaDalObject.GetSuppliers();
                    Console.WriteLine("{0,-5}{1,-10}", "Id", "Name");

                    foreach (var item in supplierDetails)
                    {
                        Console.WriteLine("{0,-5}{1,-10}",item.Id,item.Name);
                    }
                    Console.Write("Choose a Supplier Id : ");
                    string supplierId = Console.ReadLine().TrimStart();
                    bool status = pharmaDalObject.InsertPharmaItem(name,cost,stockCount,typeId,supplierId);
                    if (status == true)
                    {
                        Console.WriteLine("\nPharamaceutical Item Inserted Successfully");
                    }
                    else
                    {
                        Console.WriteLine("\n{0} is already added,Try adding different item");
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);

                }
            }
            catch (Exception e)
            {
                Console.WriteLine(" "+ e.Message);

            }

        }

        public static void ViewProductsAfterDiscount(double cost,double discount )
        {
            try
            {
                PharmaDAL pharmaDalObject = new PharmaDAL();
                var pharmaData = pharmaDalObject.GetPharmaDataItemDetails();

                if (pharmaData == null || pharmaData.Count == 0)
                {
                    Console.WriteLine("\nNo Records Found");
                }
                else if(pharmaData.Count > 0)
                {
                    Console.WriteLine("\n{0,-10}{1,-20}{2,-25}{3,-20}","Id","Name","Price After Discount","Quantity In Stock");

                    foreach (var item in pharmaData)
                    {
                        Console.WriteLine("{0,-10}{1,-20}{2,-25}{3,-20}",item.Id,item.Name,item.Cost,item.QuantityInStock);
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(" " + e.Message);

            }
        }
           

    }


}







